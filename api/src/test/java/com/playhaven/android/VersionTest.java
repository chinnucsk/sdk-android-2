/**
 * Copyright 2013 Medium Entertainment, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.playhaven.android;

import org.junit.Ignore;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;

/**
 * Tests autogenerated {@link com.playhaven.android.Version}
 */
@RunWith(JUnit4.class)
public class VersionTest
{
    /**
     * When checking out a tag/rev, you are put onto a headless branch. As such,
     * the branch and version information will be incorrect.  The fix for that is
     * to do a <code>git checkout branchname</code> afterwards, before starting the build.
     */
    private static final String HEADLESS = " Was the checkout headless?";

    /**
     * Validate that the branch is not null or empty
     * Not actually testing whether it is a real branch name in source control
     */
    @Test
    public void validBranch()
    {
        assertNotNull("Branch is null." + HEADLESS , Version.SOURCE_BRANCH);
        assertNotEquals("Branch is empty." + HEADLESS, "", Version.SOURCE_BRANCH);
    }

    /**
     * Validate that the source version is not null or empty.
     * Also validate that the revision is a valid partial SHA (ie: hex)
     * Not actually validating against source control
     */
    @Test
    public void validSourceVersion()
    {
        assertNotNull("Version is null." + HEADLESS, Version.SOURCE_VERSION);
        assertNotEquals("Version is empty." + HEADLESS, "", Version.SOURCE_VERSION);
      	// if using a tag, it could look like "2.0.1-2-g9917797"
    	String tmp = Version.SOURCE_VERSION.replaceAll("[^0-9a-gA-F\\.\\-]+", "");
		assertNotEquals("Version has invalid characters: " + tmp, "", tmp);
    }

    /**
     * Validate that Jenkins has populated the SERVER_BUILD_ID with a valid value.
     */
    @Test
    @Ignore
    public void validBuildId()
    {
        assertNotNull(Version.SERVER_BUILD_ID);
        assertNotEquals("N/A", Version.SERVER_BUILD_ID);
    }

    /**
     * Validate that Jenkins has populated the SERVER_BUILD_TIME with a valid value.
     */
    @Test
    @Ignore
    public void validBuildTime()
    {
        assertNotNull(Version.SERVER_BUILD_TIME);
        assertNotEquals("N/A", Version.SERVER_BUILD_TIME);
    }
}
